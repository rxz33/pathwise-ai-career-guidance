from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from app.services.gemini_service import ask_gemini
from app.services.mongo_service import get_user_by_email 
from app.services.mongo_service import update_user_by_email 
from string import Template
import os

router = APIRouter()

class CrossExamAnswerInput(BaseModel):
    email: str
    evaluation: str

@router.post("/generate-results")
async def generate_final_career_result(data: CrossExamAnswerInput):
    try:
        # 1. Fetch user by email
        user = await get_user_by_email(data.email)
        if not user:
            raise HTTPException(status_code=404, detail="User not found")

        personal = user.get("personalInfos", {})
        interests = user.get("interests", {})
        strengths = user.get("strengthsAndWeaknesses", {})
        learning = user.get("learningRoadmap", {})

        full_name = personal.get("fullName", "User")

        # 2. Load and format result prompt
        BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
        prompt_path = os.path.join(BASE_DIR, "app", "prompts", "result_prompt.txt")

        if not os.path.isfile(prompt_path):
            raise HTTPException(status_code=500, detail=f"Prompt file not found at: {prompt_path}")

        with open(prompt_path, "r", encoding="utf-8") as f:
            raw_prompt = f.read()

        prompt = Template(raw_prompt).substitute(
            fullName=full_name,
            age=personal.get("age", ""),
            currentStatus=personal.get("currentStatus", ""),
            fieldOfStudy=personal.get("fieldOfStudy", ""),
            educationLevel=personal.get("educationLevel", ""),
            mobility=personal.get("mobility", ""),
            financialStatus=personal.get("financialStatus", ""),
            exploreAreas=interests.get("exploreAreas", ""),
            preferredRole=interests.get("preferredRole", ""),
            jobPriorities=", ".join(interests.get("jobPriorities", []) or []),
            strengths=strengths.get("strengths", ""),
            struggleWith=strengths.get("struggleWith", ""),
            confidenceLevel=strengths.get("confidenceLevel", ""),
            riskTaking=learning.get("riskTaking", ""),
            evaluation=data.evaluation.strip()
        )

        # 3. Get final analysis from Gemini
        final_result = await ask_gemini(prompt)
        
        # âœ… Save result to MongoDB
        await update_user_by_email(data.email, {"finalAnalysis": final_result})
        print("Final Result Generated by Gemini:", final_result)

        return {"finalAnalysis": final_result}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Final result error: {str(e)}") 